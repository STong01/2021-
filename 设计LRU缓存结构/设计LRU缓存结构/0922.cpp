#include <iostream>
#include <vector>
#include <unordered_map>
#include <list>
using namespace std;

//设计LRU缓存结构，该结构在构造时确定大小，假设大小为K，并有如下两个功能
//set(key, value)：将记录(key, value)插入该结构
//get(key)：返回key对应的value值

//set和get方法的时间复杂度为O(1)
//某个key的set或get操作一旦发生，认为这个key的记录成了最常使用的。
//当缓存的大小超过K时，移除最不经常使用的记录，即set或get最久远的。
//若opt = 1，接下来两个整数x, y，表示set(x, y)
//若opt = 2，接下来一个整数x，表示get(x)，若x未出现过或已被移除，则返回 - 1
//对于每个操作2，输出一个答案

//输入
//[[1, 1, 1], [1, 2, 2], [1, 3, 2], [2, 1], [1, 4, 4], [2, 2]], 3
//输出
//[1, -1]
//说明
//第一次操作后：最常使用的记录为("1", 1)
//第二次操作后：最常使用的记录为("2", 2)，("1", 1)变为最不常用的
//第三次操作后：最常使用的记录为("3", 2)，("1", 1)还是最不常用的
//第四次操作后：最常用的记录为("1", 1)，("2", 2)变为最不常用的
//第五次操作后：大小超过了3，所以移除此时最不常使用的记录("2", 2)，加入记录("4", 4)，并且为最常使用的记录，然后("3", 2)变为最不常使用的记录

class Solution 
{
public:
	vector<int> LRU(vector<vector<int> >& operators, int k) 
	{
		caps = k;
		for (auto op : operators)
		{
			if (op[0] == 1)
			{
				set(op[1], op[2]);
			}
			else if (op[0] == 2)
			{
				get(op[1]);
			}
		}
		return res;
	}

private:

	int caps;
	vector<int> res;

	list<pair<int, int>> cache;
	unordered_map<int, int> maps;

	void set(int key, int val)
	{
		if (maps.find(key) != maps.end())
		{
			maps.erase(key);
		}
		if (cache.size() == caps)
		{
			maps.erase(cache.back().first);
			cache.pop_back();
		}
		cache.push_front({ key, val });
		maps[key] = cache.front().second;
		return;
	}

	void get(int key)
	{
		if (maps.find(key) == maps.end())
		{
			res.push_back(-1);
			return;
		}
		cache.remove({ key, maps[key] });
		cache.push_front({ key, maps[key] });
		res.push_back(maps[key]);
		return;
	}
};

int main()
{

	system("pause");
	return 0;
}